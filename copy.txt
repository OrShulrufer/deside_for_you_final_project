from BL.collaborative_filtering import CF
from BL.content_base_filtering import CBF
import pandas

class Hybrid:

    def get_courses(clf_matrix_df, df_clusters, df_courses, user_course_df, user, stop_words, numer_of_courses_to_fetch=5):
        # fetch cluster number by_user
        cluster_number = df_clusters.loc[df_clusters['userid_DI'] == user, 'prediction'].iloc[0]

        # fetch cluster by cluster number
        cluster_df = df_clusters.loc[df_clusters['prediction'].isin([cluster_number])]

        # get clf matrix only with cluster of user
        users_list = clf_matrix_df.index.unique()
        combine_list = list(set(users_list).intersection(cluster_df.userid_DI.unique()))
        # combine_list = list(set(users_list).intersection(user_course_df["userid_DI"].unique()))
        cluster_matrix_df = clf_matrix_df[clf_matrix_df.index.isin(combine_list)]

        # get user's courses
        user_courses_list = user_course_df.loc[user_course_df['userid_DI'] == user, 'course_id'].unique()

        # get cbf courses
        cbf_corses_list = CBF.get_courses(user_courses_list, df_courses,  stop_words)

        # get clf courses
        clf_list_of_courses, courses_prioreties = CF.get_curses(cluster_matrix_df, user)

        # get courses that are in clf and cbf
        combine_list_of_courses = list(set(cbf_corses_list).intersection(clf_list_of_courses))

        combine_list_of_courses = Hybrid.get_courses_from_cbf(numer_of_courses_to_fetch, combine_list_of_courses, courses_prioreties, cbf_corses_list)

        combine_list_of_courses = Hybrid.get_courses_from_prioreties(numer_of_courses_to_fetch, combine_list_of_courses, courses_prioreties)

        if len(combine_list_of_courses) < numer_of_courses_to_fetch:
            courses_prioreties = courses_prioreties[2:]
            for i in courses_prioreties:
                if len(combine_list_of_courses) < numer_of_courses_to_fetch:
                    if i not in combine_list_of_courses:
                        combine_list_of_courses.append(i)

        return combine_list_of_courses

    def get_courses_from_prioreties(n, combine_list_of_courses, courses_prioreties):
        if len(combine_list_of_courses) < n:
            courses_prioreties = courses_prioreties[7:]
            for i in courses_prioreties:
                if len(combine_list_of_courses) < n:
                    if i not in combine_list_of_courses:
                        combine_list_of_courses.append(i)

        return combine_list_of_courses

    def get_courses_from_cbf(n, combine_list_of_courses, courses_prioreties, cbf_corses_list):
        if len(combine_list_of_courses) < n:
            p = courses_prioreties[0:10]
            for i in p:
                if len(combine_list_of_courses) < n:
                    if i in cbf_corses_list and i not in combine_list_of_courses:
                        combine_list_of_courses.append(i)
        return combine_list_of_courses
