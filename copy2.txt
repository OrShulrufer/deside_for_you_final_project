collaborative_filtering import CF
from BL.content_base_filtering import CBF
import pandas

class Hybrid:

    def get_courses(clf_matrix_df, df_clusters, df_courses, user_course_df, user, stop_words, numer_of_courses_to_fetch=5):
        # fetch cluster number by_user
        cluster_number = df_clusters.loc[df_clusters['userid_DI'] == user, 'prediction'].iloc[0]

        # fetch cluster by cluster number
        cluster_df = df_clusters.loc[df_clusters['prediction'].isin([cluster_number])]

        # get clf matrix only with cluster of user
        users_list = clf_matrix_df.index.unique()
        combine_list = list(set(users_list).intersection(cluster_df.userid_DI.unique()))
        # combine_list = list(set(users_list).intersection(user_course_df["userid_DI"].unique()))
        cluster_matrix_df = clf_matrix_df[clf_matrix_df.index.isin(combine_list)]

        # get user's courses
        user_courses_list = user_course_df.loc[user_course_df['userid_DI'] == user, 'course_id'].unique()

        # get cbf courses
        cbf_corses_list =  CBF.get_courses(user_courses_list, df_courses,  stop_words)

        # get clf courses
        clf_list_of_courses = CF.get_curses(cluster_matrix_df, user)

        # get courses priority
        courses_prioreties = Hybrid.get_courses_prioreties(cluster_matrix_df)

        combine_list_of_courses = list(set(cbf_corses_list).intersection(clf_list_of_courses))

        length_of_comine_list = len(combine_list_of_courses)

        n = numer_of_courses_to_fetch - length_of_comine_list
        m = list(set(clf_list_of_courses) - set(combine_list_of_courses))
        combine_list_of_courses = combine_list_of_courses + Hybrid.get_n_courses_from_clf_list(5, combine_list_of_courses, courses_prioreties)
        print(combine_list_of_courses)

        p = courses_prioreties[0:10]
        for i in cbf_corses_list:
            if i in p and i not in combine_list_of_courses:
                combine_list_of_courses.append(i)
        print(combine_list_of_courses)

        if len(combine_list_of_courses) < numer_of_courses_to_fetch:
            index = numer_of_courses_to_fetch - len(combine_list_of_courses)

            courses_prioreties = courses_prioreties[7:]
            for i in courses_prioreties:
                if index > 0:
                    if i not in combine_list_of_courses:
                        combine_list_of_courses.append(i)
                        index -= 1
        return combine_list_of_courses


    def get_n_courses_from_clf_list(n, clf_list_of_courses, courses_prioreties):
        n_courses = []
        index = 0
        courses_prioreties = courses_prioreties[7:]
        for i in courses_prioreties:
            if index < n:
                if i not in clf_list_of_courses:
                    n_courses.append(i)
                    index += 1

        return n_courses

    def get_courses_prioreties(df):
        courses = []
        list_of_courses = df.columns.values.tolist()
        for course in list_of_courses:
            courses.append((course, (df[course] == 1).sum()))

        courses = sorted(courses, key=lambda x: x[1])

        courses = list(map(lambda x: x[0], courses))

        return courses

